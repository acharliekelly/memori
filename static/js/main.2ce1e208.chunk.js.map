{"version":3,"sources":["redux/middleware/logger.js","redux/middleware/monitorReducer.js","api/imageApi.js","api/deckApi.js","api/boardApi.js","redux/reducers/index.js","redux/actions/actionTypes.js","redux/actions/index.js","components/Header.jsx","containers/Header.js","components/Tile.jsx","components/GameOver.jsx","components/Board.jsx","containers/Board.js","components/App.jsx","index.js","redux/configureStore.js"],"names":["logger","store","next","action","console","group","type","info","result","log","getState","groupEnd","monitorReducerEnhancer","createStore","reducer","initialState","enhancer","state","number","start","performance","now","newState","end","diff","Math","round","cloudUri","getCloudImageUrl","deckId","imageId","path","width","getDeck","decks","defaultDeckStyle","backgroundColor","getCardFaceStyle","deck","tile","title","style","Object","assign","cardStyle","opacity","matched","hasImages","img","cardValue","image","faces","id","imgWidth","getCloudFace","value","background","backgroundImage","getCardBackStyle","cardBack","startsWith","getCloudBack","GridOptions","GameTile","cardVal","flipped","tiles","filter","isMatched","flippedTiles","length","getNumTiles","gridSize","boardSize","floor","shuffle","array","newArray","Array","from","i","j","random","temp","initTiles","tileCount","push","INITIAL_STATE","moves","matches","secondFlip","gameOver","deckReducer","tileReducer","map","index","rootReducer","every","restartGame","BoardSizeSelector","updateBoardSize","Dropdown","onSelect","Toggle","variant","Menu","keys","size","Item","key","eventKey","DeckSelector","updateDeck","defaultValue","Header","props","currentDeck","showFaces","deckTitle","Container","className","Row","Col","Button","onClick","actionCreators","connect","flipCard","isFlipped","flipSpeedBackToFront","flipSpeedFrontToBack","flipDirection","showText","GameOver","useState","show","setShow","handleClose","Modal","onHide","backdrop","closeButton","Title","Body","Footer","Board","isGameOver","isSecondFlip","startGame","checkMatch","showWin","useEffect","setTimeout","boardCls","boardStyle","fluid","Tile","Spinner","marginLeft","marginTop","animation","App","preloadedState","middlewares","thunkMiddleware","enhancers","applyMiddleware","composeWithDevTools","configureStore","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ce1e208.chunk.js","sourcesContent":["\n\nconst logger = store => next => action => {\n  console.group(action.type);\n  console.info('dispatching', action);\n  let result = next(action);\n  console.log('next state', store.getState());\n  console.groupEnd();\n  return result;\n}\n\nexport default logger;","const round = number => Math.round(number * 100) / 100;\n\nconst monitorReducerEnhancer = createStore => (\n  reducer, \n  initialState,\n  enhancer\n) => {\n  const monitoredReducer = (state, action) => {\n    const start = performance.now();\n    const newState = reducer(state, action);\n    const end = performance.now();\n    const diff = round(end - start);\n\n    console.log('reducer process time:', diff);\n\n    return newState;\n  }\n\n  return createStore(monitoredReducer, initialState, enhancer);\n}\n\nexport default monitorReducerEnhancer;","\nconst CLOUD_NAME = 'cantimaginewhy';\n\n\nconst cloudUri = `https://res.cloudinary.com/${CLOUD_NAME}/`;\n\n/**\n * return Cloudinary resource url\n * @param {String} deckId deck id\n * @param {String} imageId cloudinary file name (w/o dir)\n * @param {String} path cloudinary directory\n * @param {int} width image width (px)\n * @returns {URL}\n */\nexport const getCloudImageUrl = (deckId, imageId, path, width = 60) => {\n  return `${cloudUri}/w_${width}/${path}/${imageId}`;\n}\n","import { getCloudImageUrl } from './imageApi';\nimport { decks } from './deck.json';\n\n// opacity for matched tiles\nconst MATCHED_OPACITY = 0.7;\n\n/**\n * return Deck\n * @param {string} deckId\n * @returns {Deck}\n */\nexport const getDeck = deckId => {\n  return decks[deckId];\n}\n\nconst defaultDeckStyle = ({\n  backgroundColor: '#f00'\n});\n\n/**\n * return image src URL\n * @param {Deck} deck \n * @param {int} cardValue \n * @returns {URL}\n */\nexport const getCloudFace = (deck, cardValue) => {\n  const image = deck.faces[cardValue];\n  return getCloudImageUrl(deck.id, image, deck.path, deck.imgWidth);\n}\n\n/**\n * return image src URL\n * @param {Deck} deck \n * @returns {URL}\n */\nexport const getCloudBack = deck => {\n  return getCloudImageUrl(deck.id, deck.cardBack, deck.path, deck.imgWidth);\n}\n\n/**\n * return style object\n * @param {Deck} deck \n * @param {GameTile} tile \n * @returns {Object} style\n */\nexport const getCardStyle = (deck, tile) => {\n  return tile.flipped ?\n    getCardFaceStyle(deck, tile) : getCardBackStyle(deck);\n}\n\n/**\n * return style object\n * @param {Deck} deck \n * @param {GameTile} tile \n * @returns {Object} style\n */\nexport const getCardFaceStyle = (deck, tile) => {\n  // first check if deck is hydrated\n  if (!deck.title) return defaultDeckStyle;\n\n  const style = Object.assign({}, deck.cardStyle);\n  style.opacity = tile.matched ? MATCHED_OPACITY : 1;\n\n  if (deck.hasImages) {\n    // images\n    const img = getCloudFace(deck, tile.value);\n    style.backgroundColor = deck.background;\n    style.backgroundImage = `url(${img})`;\n  } else {\n    // color\n    style.backgroundColor = deck.faces[tile.value];\n  }\n  return style;\n}\n\n/**\n * return style object\n * @param {Deck} deck \n * @returns {Object} style \n */\nexport const getCardBackStyle = deck => {\n  // first check if deck is hydrated\n  if (!deck.title) return defaultDeckStyle;\n\n  const style = Object.assign({}, deck.cardStyle);\n\n  if (deck.cardBack.startsWith('#')) {\n    style.backgroundColor = deck.cardBack;\n  } else {\n    // cardBack is image\n    const img = getCloudBack(deck);\n    style.backgroundColor = deck.background;\n    style.backgroundImage = `url(${img}`;\n  }\n  return style;\n}\n","\n\nexport const DEFAULT_DECK = 'colors';\nexport const DEFAULT_GRID = '4x4';\n\n/**\n * Available board sizes\n * @returns {Object<string,[int,int]>}\n */\nexport const GridOptions = {\n  '2x2': [2,2],\n  '2x4': [2,4],\n  '3x4': [3,4],\n  '4x4': [4,4],\n  '4x5': [4,5],\n  '4x6': [4,6],\n  '5x6': [5,6]\n};\n\n\n/**\n * Tile state\n * @param {int} cardVal card value\n * @returns {Object<int,bool,bool>}\n */\nexport const GameTile = (cardVal = 0) => ({\n  value: cardVal,\n  flipped: false,\n  matched: false\n});\n\n\n/**\n * get flipped tiles\n * @param {GameTile[]} tiles \n * @returns {GameTile[]}\n */\nexport const flipped = tiles => {\n  return tiles.filter(tile => tile.flipped && !tile.matched);\n}\n/**\n * return true if exactly 2 tiles are flipped\n * @param {GameTile[]} tiles\n * @returns {boolean}\n */\nexport const isSecondFlip = tiles => {\n  return (flipped(tiles).length === 2);\n}\n\n/**\n * return true if exactly 2 tiles are flipped, and match\n * @param {GameTile[]} tiles array of objects {0, false, false}\n * @returns {boolean}\n */\nexport const isMatched = tiles => {\n  const flippedTiles = flipped(tiles);\n  return (flippedTiles.length === 2 \n    && flippedTiles[0].value === flippedTiles[1].value);\n}\n\n\n/**\n * \n * @param {string} gridSize \n * @returns {int} number of tiles\n */\nconst getNumTiles = gridSize => {\n  const [boardColumns, boardRows] = GridOptions[gridSize];\n  const boardSize = boardColumns * boardRows;\n  return Math.floor(boardSize / 2);\n};\n\n/**\n * \n * @param {GameTile[]} array\n * @returns {GameTile[]}\n */\nconst shuffle = array => {\n  const newArray = Array.from(array);\n  for (let i = newArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const temp = newArray[i];\n    newArray[i] = newArray[j];\n    newArray[j] = temp;\n  }\n  return newArray;\n}\n\n/**\n * get array of tiles\n * @param {string} gridSize the size of the board, eg '2x2'\n * @returns {GameTile[]}\n */\nexport const initTiles = (gridSize = DEFAULT_GRID) => {\n  const tileCount = getNumTiles(gridSize);\n  const tiles = [];\n  for (let i=0; i<tileCount; i++) {\n    const tile = GameTile(i);\n    // add 2 copies of each\n    tiles.push(tile, tile);\n  }\n  return shuffle(tiles);\n}\n\n\n\n\n","// import { combineReducers } from 'redux';\nimport * as ACTIONS from '../actions/actionTypes';\nimport { getDeck } from '../../api/deckApi';\nimport { \n  isMatched,\n  initTiles,\n  DEFAULT_DECK,\n  DEFAULT_GRID\n} from '../../api/boardApi';\n\nexport const INITIAL_STATE = {\n  deck: { id: DEFAULT_DECK },\n  gridSize: DEFAULT_GRID,\n  moves: 0,\n  matches: 0,\n  tiles: [],  // { value: int, flipped: bool, matched: bool }\n  secondFlip: false,\n  gameOver: false\n};\n\n\n/**\n * reducer\n * @param {Deck} state \n * @param {GameAction} action \n * @returns {Deck}\n */\nconst deckReducer = (state = INITIAL_STATE.deck, action) => {\n  switch (action.type) {\n    case ACTIONS.RESTART_GAME:\n      return getDeck(state.id);\n    case ACTIONS.START_GAME:\n    case ACTIONS.CHANGE_DECK:\n      return getDeck(action.deckId);\n    default:\n      return state;\n  }\n}\n\n/**\n * reducer\n * @param {GameTile[]} state \n * @param {GameAction} action \n * @returns {GameTile[]}\n */\nconst tileReducer = (state = [], action) => {\n\n  switch (action.type) {\n    case ACTIONS.START_GAME:\n    case ACTIONS.RESIZE_GRID:\n      return initTiles(action.gridSize);\n\n    case ACTIONS.CHANGE_DECK:\n      // flip all cards down\n      return state.map(tile => {\n        return {\n          ...tile,\n          flipped: false,\n          matched: false\n        }\n      });\n\n    case ACTIONS.FLIP_CARD:\n      return state.map((tile, index) => {\n        if (index === action.index) {\n          return {\n            ...tile,\n            flipped: true\n          }\n        } else {\n          return tile;\n        }\n      });\n\n    case ACTIONS.CHECK_MATCH:\n      if (isMatched(state)) {\n        return state.map(tile => {\n          return {\n            ...tile,\n            matched: tile.flipped\n          }\n        })\n      } else {\n        return state.map(tile => {\n          return {\n            ...tile,\n            flipped: tile.matched\n          }\n        })\n      };\n\n    case ACTIONS.SHOW_FACES:\n      return state.map(tile => {\n        return {\n          ...tile,\n          flipped: true,\n          matched: true\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n\n\n/**\n * reducer\n * @param {GameState} state \n * @param {GameAction} action \n * @returns {GameState}\n */\nconst rootReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.START_GAME:\n      return {\n        ...INITIAL_STATE,\n        tiles: tileReducer(state.tiles, action),\n        deck: deckReducer(state.deck, action)\n      };\n\n    case ACTIONS.RESTART_GAME:\n      return {\n        ...INITIAL_STATE,\n        gridSize: state.gridSize,\n        tiles: tileReducer([], { \n          type: ACTIONS.START_GAME,\n          gridSize: state.gridSize\n        }),\n        deck: deckReducer(state.deck, action)\n      };\n\n    case ACTIONS.RESIZE_GRID:\n      return {\n        ...state,\n        gridSize: action.gridSize,\n        tiles: tileReducer(state.tiles, action),\n        moves: 0,\n        matches: 0,\n        secondFlip: false\n      };\n\n    case ACTIONS.CHANGE_DECK:\n      return {\n        ...state,\n        deck: deckReducer(state.deck, action),\n        tiles: tileReducer(state.tiles, action)\n      };\n\n    case ACTIONS.FLIP_CARD:\n      return {\n        ...state,\n        tiles: tileReducer(state.tiles, action),\n        secondFlip: !state.secondFlip\n      };\n\n    case ACTIONS.CHECK_MATCH:\n      const matched = isMatched(state.tiles);\n      return {\n        ...state,\n        moves: state.moves + 1,\n        matches: matched ? state.matches + 1 : state.matches,\n        tiles: tileReducer(state.tiles, action)\n      };\n\n    case ACTIONS.SHOW_FACES:\n      return {\n        ...state,\n        tiles: tileReducer(state.tiles, action)\n      };\n\n    case ACTIONS.SHOW_WIN:\n      return {\n        ...state,\n        gameOver: state.tiles.every(tile => tile.matched)\n      }\n          \n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;","/*\n *  Action Types\n */\nexport const START_GAME = 'START_GAME';\nexport const RESTART_GAME = 'RESTART_GAME';\n\nexport const CHANGE_DECK = 'CHANGE_DECK';\n\nexport const RESIZE_GRID = 'RESIZE_GRID';\n\nexport const FLIP_CARD = 'FLIP_CARD';\nexport const CHECK_MATCH = 'CHECK_MATCH';\n\nexport const SHOW_WIN = 'SHOW_WIN';\nexport const SHOW_FACES = 'SHOW_FACES';","import * as ACTIONS from './actionTypes';\n\n/*\n * Action Creators\n */\n\nexport function startGame (deckId, gridSize) {\n  return {\n    type: ACTIONS.START_GAME,\n    deckId,\n    gridSize\n  }\n}\n\nexport function restartGame () {\n  return { type: ACTIONS.RESTART_GAME };\n}\n\nexport function changeDeck (deckId) {\n  return { type: ACTIONS.CHANGE_DECK, deckId };\n}\n\nexport function resizeBoard (gridSize) {\n  return { type: ACTIONS.RESIZE_GRID, gridSize };\n}\n\nexport function flipCard (index) {\n  return {\n    type: ACTIONS.FLIP_CARD,\n    index\n  };\n}\n\nexport function checkMatch () {\n  return { \n    type: ACTIONS.CHECK_MATCH\n  };\n}\n\nexport function showWin () {\n  return { type: ACTIONS.SHOW_WIN };\n}\n\nexport function showFaces () {\n  return { type: ACTIONS.SHOW_FACES };\n}","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Button from 'react-bootstrap/Button';\n\nimport { GridOptions } from '../api/boardApi';\n\nimport '../css/header.scss';\n\nconst BoardSizeSelector = ({ updateBoardSize }) => (\n  <Dropdown onSelect={updateBoardSize}>\n    <Dropdown.Toggle variant=\"primary\">Select Board Size</Dropdown.Toggle>\n    <Dropdown.Menu>\n      {Object.keys(GridOptions).map(size => (\n        <Dropdown.Item key={size} eventKey={size}>{size}</Dropdown.Item>\n      ))}\n    </Dropdown.Menu>\n  </Dropdown>\n);\n\nconst DeckSelector = ({ updateDeck }) => (\n  <Dropdown onSelect={updateDeck}>\n    <Dropdown.Toggle variant=\"secondary\">Select Deck</Dropdown.Toggle>\n    <Dropdown.Menu defaultValue=\"colors\">\n      <Dropdown.Item eventKey=\"colors\">Colors</Dropdown.Item>\n      <Dropdown.Item eventKey=\"shapes\">Shapes</Dropdown.Item>\n      <Dropdown.Item eventKey=\"romanov\">Russian</Dropdown.Item>\n      <Dropdown.Item eventKey=\"tech\">Logos</Dropdown.Item>\n      <Dropdown.Item eventKey=\"landscape\">Landscapes</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n);\n\nconst Header = props => {\n  const { boardSize, currentDeck, moves, matches } = props;\n  const { updateDeck, updateBoardSize, restartGame, showFaces } = props;\n  const deckTitle = currentDeck ? currentDeck.title : 'None';\n  return (\n    <Container className=\"header\">\n      <h1>Memory Game</h1>\n      <Row>\n        <Col className=\"size-selector\">\n          <BoardSizeSelector updateBoardSize={updateBoardSize} />\n        </Col>\n        <Col />\n        <Col className=\"board-size\">\n          <span className=\"label\">Board: </span>\n          <span className=\"current-value\">{boardSize}</span>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"deck-selector\">\n          <DeckSelector updateDeck={updateDeck} />\n        </Col>\n        <Col />\n        <Col className=\"deck\">\n          <span className=\"label\">Deck: </span>\n          <span className=\"current-value\">{deckTitle}</span>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Button variant=\"danger\" onClick={restartGame}>New Game</Button>\n          {' '}\n          <Button variant=\"warning\" onClick={showFaces}>Reveal</Button>\n        </Col>\n        <Col className=\"moves\">\n          <span className=\"label\">Moves: </span>\n          <span className=\"current-value\">{moves}</span>\n        </Col>\n        <Col className=\"matches\">\n          <span className=\"label\">Matches: </span>\n          <span className=\"current-value\">{matches}</span>\n        </Col>\n      </Row>\n    </Container>\n  );\n\n} \n\nexport default Header;","import { connect } from \"react-redux\";\nimport { \n  changeDeck,\n  resizeBoard,\n  restartGame,\n  showFaces\n} from '../redux/actions/';\nimport { INITIAL_STATE } from '../redux/reducers/';\nimport Header from '../components/Header';\n\nconst mapStateToProps = (state = INITIAL_STATE) => ({\n  boardSize: state.gridSize,\n  currentDeck: state.deck,\n  moves: state.moves,\n  matches: state.matches\n});\n\nconst actionCreators = {\n  updateDeck: changeDeck, \n  updateBoardSize: resizeBoard,\n  restartGame,\n  showFaces\n};\n\nexport default connect(mapStateToProps, actionCreators)(Header);","import React from 'react';\nimport ReactCardFlip from 'react-card-flip';\nimport { \n  getCardBackStyle, \n  getCardFaceStyle\n} from '../api/deckApi';\n\nexport default ({ index, tile, flipCard, deck }) => (\n  <ReactCardFlip\n    isFlipped={tile.flipped}\n    flipSpeedBackToFront={0.6}\n    flipSpeedFrontToBack={0.6}\n    flipDirection=\"horizontal\" \n  >\n    <div  \n      className=\"card card-back\" \n      style={getCardBackStyle(deck)} \n      onClick={() => flipCard(index)} \n    />\n    <div  \n      className=\"card card-face\" \n      style={getCardFaceStyle(deck, tile)}>\n        {deck.showText && (\n          <div className=\"text\">{tile.value}</div>\n        )}\n    </div>\n  </ReactCardFlip>\n);","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nconst GameOver = ({ restartGame }) => {\n  const [ show, setShow ] = useState(true);\n  const handleClose = () => setShow(false);\n  const restart = () => {\n    handleClose();\n    restartGame();\n  }\n\n  return (\n    <Modal show={show} onHide={handleClose} backdrop=\"static\">\n      <Modal.Header closeButton>\n        <Modal.Title>You Win!</Modal.Title>\n      </Modal.Header>\n      <Modal.Body className=\"justify-content-between\">\n        <div>Want to play again?</div>\n        <Button variant=\"primary\" onClick={restart}>Restart</Button>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default GameOver;\n","import React, { useEffect } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Tile from './Tile';\nimport GameOver from './GameOver';\nimport { DEFAULT_DECK, DEFAULT_GRID } from '../api/boardApi';\n\nimport '../css/grid.scss';\nimport '../css/board.scss';\n\nconst CHECK_MATCH_TIMER = 1500;\n\nconst Board = props => {\n  const { deck, tiles, isGameOver, gridSize, isSecondFlip, matches } = props;\n  const { flipCard, restartGame, startGame, checkMatch, showWin } = props;\n  \n  useEffect(() => {\n    const deckId = deck ? deck.id : DEFAULT_DECK;\n    const size = gridSize || DEFAULT_GRID;\n    \n    if (!tiles || tiles.length === 0) {\n      console.log(`No tiles! starting game with deck \"${deckId}\" and grid \"${size}\"`)\n      startGame(deckId, size);\n    }\n  }, [deck, tiles, gridSize, startGame]);\n\n  useEffect(() => {\n    if (!isSecondFlip) {\n      // second card has been flipped\n      setTimeout(checkMatch, CHECK_MATCH_TIMER);\n    }\n  }, [isSecondFlip, checkMatch]);\n\n  useEffect(() => {\n    if (tiles && matches === tiles.length / 2) {\n      showWin();\n    }\n  }, [matches, tiles, showWin]);\n\n  \n\n  const boardCls = `game-board grid-${gridSize}`;\n  const boardStyle = { backgroundColor: deck ? deck.background : '#fff' };\n  if (!tiles) {\n    return <Spinner style={{ marginLeft: \"3rem\", marginTop: \"2rem\" }} animation=\"grow\" variant=\"danger\" />\n  } else {\n    return (\n      <Container fluid=\"xl\" className={boardCls} style={boardStyle}>\n        {isGameOver && (\n          <GameOver restartGame={restartGame} />\n        )}\n        {tiles.map((tile, index) => (\n          <Tile key={index} index={index} tile={tile} flipCard={flipCard} deck={deck} />\n        ))}\n      </Container>\n    )\n  }\n  \n};\n\nexport default Board;","import { connect } from \"react-redux\";\nimport { \n  restartGame, \n  flipCard,\n  startGame,\n  checkMatch,\n  showWin\n} from '../redux/actions';\nimport { INITIAL_STATE } from '../redux/reducers/';\nimport Board from '../components/Board';\n\nconst mapStateToProps = (state = INITIAL_STATE) => ({\n  deck: state.deck,\n  gridSize: state.gridSize,\n  tiles: state.tiles,\n  isGameOver: state.gameOver,\n  isSecondFlip: state.secondFlip,\n  matches: state.matches,\n  moves: state.moves\n});\n\nconst actionCreators = {\n  restartGame,\n  flipCard,\n  startGame,\n  checkMatch,\n  showWin\n};\n\nexport default connect(mapStateToProps, actionCreators)(Board);","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\n\nimport Header from '../containers/Header';\nimport Board from '../containers/Board';\n\n\nconst App = props => {\n  return (\n    <Container>\n      <Header />\n      <Board />\n    </Container>\n  );\n};\n\nexport default App;","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport configureStore from './redux/configureStore';\nimport App from './components/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst store = configureStore();\n\nconst renderApp = () => {\n  render (\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n  );\n  \n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./components/App', renderApp)\n  }\n} \n\nrenderApp();","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nimport logger from './middleware/logger';\nimport monitorReducerEnhancer from './middleware/monitorReducer';\nimport rootReducer from './reducers/';\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [logger, thunkMiddleware];\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n\n  const enhancers = [middlewareEnhancer, monitorReducerEnhancer];\n  \n  const store = createStore(\n    rootReducer,\n    preloadedState,\n    composeWithDevTools(...enhancers)  \n  );\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer));\n  }\n\n  return store;\n};\n"],"sourceRoot":""}